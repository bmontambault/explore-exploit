import pandas as pd
import seaborn as sns
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

import GPy


def get_reward_function(kern=GPy.kern.RBF(1, 1, 10)):
    
    np.random.seed(4321)

    x = np.arange(80)
    cov = kern.K(x[:,None])
    y = np.random.multivariate_normal(np.zeros(len(x)), cov)
    y = (y - y.mean()) / y.std()
    return x, y


def agent(x, train_x, train_y, train_idx, kern=GPy.kern.RBF(1, 1, 10)):

    m = GPy.models.GPRegression(train_x[:,None], train_y[:,None], kernel=kern)
    m.Gaussian_noise.variance = 10 **-10
    
    mean,var = m.predict(x[:,None])
    mean = mean.ravel()
    var = var.ravel()
    
    return mean, var


def plot_expected(x, y, train_idx, figsize=(7,5)):
    
    train_x = x[train_idx]
    train_y = y[train_idx]
    mean, var = agent(x, train_x, train_y, train_idx)
    upper = mean + 2*var
    lower = mean - 2*var
    
    fig, ax = plt.subplots(figsize=figsize)
    
    ax.plot(mean)
    ax.fill_between(np.arange(len(mean)), lower, upper, alpha=.2)
    ax.plot(y)
    ax.plot(train_x, train_y, 'rx')
    ax.set_yticklabels([])
    ax.set_xticklabels([])
    return fig
        
        
def plot_actions(x, y, train_idx, actions, figsize=(15,10), fontsize=12, offset=5, labelsize=12):
    
    train_x = x[train_idx]
    train_y = y[train_idx]
    mean, var = agent(x, train_x, train_y, train_idx)
    upper = mean + 2*var
    lower = mean - 2*var
    
    fig, ax = plt.subplots(figsize=figsize)
    ax.plot(mean + offset)
    ax.fill_between(np.arange(len(mean)), lower + offset, upper + offset, alpha=.2)
    ax.plot(y + offset)
    ax.plot(train_x, train_y + offset, 'rx', mew=2, ms=12)

    ax.tick_params(axis='both', which='major', labelsize=labelsize)
    ax.set_xlabel('action', fontsize=fontsize)
    ax.set_ylabel('score', fontsize=fontsize)
    ax.set_xlim((1, 80))
    #ax.set_ylim((0, 7))
        
    for a in actions:
        ax.axvline(a, ls='--', c='k', alpha=.9)
    return fig
        

def plot_mean_greedy_actions(x, y, train_idx, figsize=(11,7), fontsize=12, offset=5, labelsize=12):
    
    actions = [45, 47, 44, 43]
    fig = plot_actions(x, y, train_idx, actions, figsize, fontsize, offset, labelsize)
    return fig


def plot_var_greedy_actions(x, y, train_idx, figsize=(11,7), fontsize=12, offset=5, labelsize=12):
    
    actions = [3, 15, 22, 60, 79]
    fig = plot_actions(x, y, train_idx, actions, figsize, fontsize, offset, labelsize)
    return fig


def plot_entropy_actions(x, y, train_idx, figsize=(11,7), fontsize=12, offset=5, labelsize=12):
    
    actions = [53, 56, 30, 32, 36]
    fig = plot_actions(x, y, train_idx, actions, figsize, fontsize, offset, labelsize)
    return fig

    
def plot_random_actions(x, y, train_idx, figsize=(11,7), fontsize=12, offset=5, labelsize=12):
    
    np.random.seed(3213)
    actions = np.random.choice(np.arange(len(x)), 5)
    fig = plot_actions(x, y, train_idx, actions, figsize, fontsize, offset, labelsize)
    return fig
    

def plot_all_actions(x, y, train_idx, figsize=(15,10)):
    
    train_x = x[train_idx]
    train_y = y[train_idx]
    mean, var = agent(x, train_x, train_y, train_idx)
    upper = mean + 2*var
    lower = mean - 2*var
    
    np.random.seed(3213)
    mean_greedy_actions = [45, 47, 44, 43]
    var_greedy_actions = [3, 15, 22, 60, 79]
    random_actions = np.random.choice(np.arange(len(x)), 5)
    mes_actions = [53, 56, 30, 32, 36]
    action_sets = [mean_greedy_actions, var_greedy_actions, mes_actions, random_actions]
    
    fig, axes = plt.subplots(2, 2, figsize=figsize)
    flat_axes = axes.ravel()
    #fig = plt.figure(figsize=figsize)
    #gs1 = gridspec.GridSpec(2, 2)
    #gs1.update(wspace=0.025, hspace=0.05)
    

    for i in range(4):
        ax = flat_axes[i]
        #ax = plt.subplot(gs1[i])
        ax.plot(mean)
        ax.fill_between(np.arange(len(mean)), lower, upper, alpha=.2)
        ax.plot(y)
        ax.plot(train_x, train_y, 'rx', mew=2, ms=12)
        #ax.set_yticklabels([])
        #ax.set_xticklabels([])
        ax.set_xlabel('action')
        ax.set_ylabel('score')
        actions = action_sets[i]
        
        for a in actions:
            ax.axvline(a, ls='--', c='k', alpha=.9)
    return fig



def plot_task(x, y, train_idx, figsize=(8,5), fontsize=12, offset=5, labelsize=12):
    
    train_x = x[train_idx]
    train_y = y[train_idx]
    
    fig, ax = plt.subplots(figsize=figsize)
    ax.bar([xi for xi in x if xi not in train_x], 10, color='black')
    ax.bar(train_x, train_y + offset, color='red')
    ax.tick_params(axis='both', which='major', labelsize=labelsize)
    ax.set_xlabel('action', fontsize=fontsize)
    ax.set_ylabel('score', fontsize=fontsize)
    ax.set_xlim((1, 80))
    ax.set_ylim((3, 7))
    return fig
            
            
train_idx = np.array([40, 50, 70])
x,y = get_reward_function()
#x+=1
#expected_fig = plot_expected(x, y, train_idx)
#actions_fig = plot_all_actions(x, y, train_idx)
